{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","Searchbox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchField","target","value","state","fetch","then","response","json","users","catch","console","log","this","filteredRobots","filter","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"0OAaeA,EAXF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,GAC1B,OACE,sBAAKC,UAAU,sDAAf,UACE,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACvB,gCACE,6BAAKF,IACL,4BAAIC,WCeKK,EApBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEnB,OACE,8BAEIA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACE,cAAC,EAAD,CAEAR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCUFC,EAnBG,SAAC,GAA+B,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAE/B,OACE,qBAAKV,UAAU,MAAf,SACE,uBACEA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCDHI,G,MAPA,SAACC,GACd,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACGJ,EAAMK,aC6CAC,E,kDA1Cb,aAAc,IAAD,8BACX,gBAmBFC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAnB3C,EAAKC,MAAQ,CACXxB,OAAQ,GACRqB,YAAY,IAJH,E,qDAQb,WAAoB,IAAD,OACnBI,MAAM,8CACHC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UACjBF,MAAK,SAAAG,GACJ,EAAKT,SAAS,CAACpB,OAAQ6B,OAExBC,MAAMC,QAAQC,S,oBASjB,WAAS,IAAD,EACwBC,KAAKT,MAA5BxB,EADD,EACCA,OAAQqB,EADT,EACSA,YACTa,EAAiBlC,EAAOmC,QAAO,SAAAnC,GACjC,OAAOA,EAAOP,KAAK2C,cAAcC,SAAShB,EAAYe,kBAExD,OAAQpC,EAAOsC,OAGX,sBAAK1C,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWU,aAAc2B,KAAKf,iBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,CAAUlB,OAAQkC,SANxB,6C,GA/BUK,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCEdO,IAASC,OAEL,cAAC,EAAD,IAEDC,SAASC,eAAe,SAM3BX,M","file":"static/js/main.c0f5ebd8.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id}) =>{\n  return(\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img alt='robots' src={`https://robohash.org/${id}?size=220x220`} />\n    <div>\n      <h2>{name}</h2>\n      <p>{email}</p>\n    </div>\n  </div>\n  )\n}\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\nreturn (\n  <div>\n    {\n      robots.map((user, i) => {\n          return (\n            <Card\n            key={i}\n            id={robots[i].id}\n            name={robots[i].name}\n            email={robots[i].email}\n            />\n          );\n      })\n    }\n  </div>\n  );\n}\n\nexport default CardList\n","import React from 'react';\n\nconst Searchbox = ({searchfield, searchChange}) =>{\n\n  return(\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"Search-Robots\"\n        onChange={searchChange} //proprietÃ  HTML nativa onChange\n                                //che riceve i valori che arrivato dall'evento\n\n        >\n      </input>\n    </div>\n\n  );\n\n}\n\nexport default Searchbox;\n","import React from 'react'\n\nconst Scroll = (props) => {\n  return(\n      <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n        {props.children}\n      </div>\n  );}\n\nexport default Scroll\n","import React, {Component} from 'react';\nimport CardList from '../components/CardList'\n// import {robots} from './robots';\nimport Searchbox from '../components/Searchbox'\nimport './App.css'\nimport Scroll from '../components/Scroll'\n\nclass App extends Component { //utilizzo degli state di React\n  constructor(){\n    super()\n    this.state = {\n      robots: [],\n      searchField:''\n    }\n  }\n\n  componentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => {\n      return response.json()})\n    .then(users => {\n      this.setState({robots: users})\n    })\n    .catch(console.log())\n    ;\n  }\n\n//Questa funzione ha il compito di memorizzare il valore dell'evento inserito nel searchbox da passare allo STATE dell'app\n  onSearchChange = (event) => { //funzione passata come metodo al searchBox per intercettare l'evento\n      this.setState({searchField: event.target.value }) //target.value ritorna il valore passato dall'evento\n      }\n\n  render(){\n    const {robots, searchField} = this.state\n    const filteredRobots = robots.filter(robots =>{\n        return robots.name.toLowerCase().includes(searchField.toLowerCase())\n      })\n      return !robots.length ?\n        <h1>Loading</h1> :\n        (\n          <div className=\"tc\">\n            <h1 className=\"f1\">RoboFriends</h1>\n            <Searchbox searchChange={this.onSearchChange}/>\n            <Scroll>\n              <CardList robots={filteredRobots}/>\n            </Scroll>\n          </div>\n        );\n      }\n    }\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n// import Card from './Card'\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />\n  // </React.StrictMode>,\n  ,document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}